{"version":3,"sources":["components/containers/Header.js","components/views/HomePageView.js","components/containers/HomePageContainer.js","store/actions/actionTypes.js","store/actions/actionCreators.js","store/thunks.js","components/views/AllCampusesView.js","components/views/AllStudentsView.js","components/views/NewStudentView.js","components/views/CampusView.js","components/views/StudentView.js","components/containers/AllCampusesContainer.js","components/containers/CampusContainer.js","components/containers/AllStudentsContainer.js","components/containers/StudentContainer.js","components/containers/NewStudentContainer.js","App.js","reportWebVitals.js","store/reducers/campuses.js","store/reducers/campus.js","store/reducers/students.js","store/reducers/student.js","store/index.js","index.js"],"names":["useStyles","makeStyles","theme","root","flexGrow","title","textAlign","fontType","fontFamily","fontSize","color","appBar","backgroundColor","shadows","greeting","display","justifyContent","width","margin","links","textDecoration","Header","classes","className","AppBar","position","elevation","Toolbar","Typography","variant","to","Button","style","marginRight","HomePageView","HomePageContainer","FETCH_ALL_CAMPUSES","ADD_CAMPUS","DELETE_CAMPUS","EDIT_CAMPUS","FETCH_CAMPUS","FETCH_ALL_STUDENTS","ADD_STUDENT","DELETE_STUDENT","EDIT_STUDENT","FETCH_STUDENT","addStudent","student","type","at","payload","deleteStudent","studentId","axios","require","AllCampusesView","props","allCampuses","length","map","campus","id","name","address","description","AllStudentsView","students","firstname","lastname","onClick","formContainer","borderRadius","customizeAppBar","formTitle","marginBottom","padding","NewStudentView","handleChange","handleSubmit","fontWeight","onSubmit","e","onChange","CampusView","StudentView","email","src","imageUrl","alt","gpa","AllCampusesContainer","console","log","this","fetchAllCampuses","Component","connect","state","dispatch","get","res","campuses","data","error","CampusContainer","fetchCampus","match","params","fetchCampusThunk","AllStudentsContainer","fetchAllStudents","allStudents","withRouter","delete","ac","deleteStudentThunk","StudentContainer","fetchStudent","fetchStudentThunk","NewStudentContainer","event","setState","target","value","preventDefault","campusId","newStudent","redirect","redirectId","post","addStudentThunk","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","action","filter","paylad","initialState","rootReducer","combineReducers","reducers","logger","createLogger","collapsed","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.02112acd.chunk.js","sourcesContent":["/*==================================================\r\nHeader.js\r\n\r\nIt contains the Header component to be displayed on every page.\r\nThe header contains navigation links to every other page.\r\n================================================== */\r\n// Import \"material\" library for building UI with React components\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\n// Define styling for the header\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    fontType: 'bold',\r\n    fontFamily: 'sans-serif', \r\n    fontSize: '35px', \r\n    color: 'darkblue'\r\n  },\r\n  appBar:{\r\n    backgroundColor: '#fcb6bb',\r\n    shadows: ['none'],\r\n  },\r\n  greeting:{\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'white',\r\n    width: \"50%\",\r\n    margin: \"auto\",\r\n  },\r\n  links:{\r\n    textDecoration: 'none',\r\n  }\r\n}));\r\n\r\n// Header component, displayed on every page\r\n// Links to every other page\r\nconst Header = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" elevation={0} className={classes.appBar}>\r\n        <Toolbar>\r\n          <Typography variant=\"h6\" className={classes.title} color=\"inherit\" >\r\n            Campus Management System\r\n          </Typography>\r\n\r\n          <Link className={classes.links} to={'/'} >\r\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\r\n              Home\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link className={classes.links} to={'/campuses'} >\r\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\r\n              All Campuses\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link className={classes.links} to={'/students'} >\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              All Students\r\n            </Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );    \r\n}\r\n\r\nexport default Header;\r\n","/*==================================================\r\nHomePageView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the home page.\r\n================================================== */\r\nconst HomePageView = () => {\r\n  // Render Home page view\r\n  return (\r\n    <div >\r\n      <h1>Home Page</h1>\r\n    </div>\r\n  );    \r\n}\r\n\r\nexport default HomePageView;","/*==================================================\r\nHomePageContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport HomePageView from '../views/HomePageView';\r\n\r\n// Render Home page view by the corresponding View component\r\nconst HomePageContainer = () => {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <HomePageView />\r\n    </div>\r\n    \r\n  );\r\n};\r\n\r\nexport default HomePageContainer;","// ACTION TYPES;\r\n\r\n//All campuses\r\nexport const FETCH_ALL_CAMPUSES = \"FETCH_ALL_CAMPUSES\";\r\nexport const ADD_CAMPUS=\"ADD_CAMPUS\";\r\nexport const DELETE_CAMPUS=\"DELETE_CAMPUS\";\r\nexport const EDIT_CAMPUS=\"EDIT_CAMPUS\";\r\n//Single campus\r\nexport const FETCH_CAMPUS = \"FETCH_CAMPUS\";\r\n\r\n//All students\r\nexport const FETCH_ALL_STUDENTS = \"FETCH_ALL_STUDENTS\";\r\nexport const ADD_STUDENT = \"ADD_STUDENT\";\r\nexport const DELETE_STUDENT = \"DELETE_STUDENT\";\r\nexport const EDIT_STUDENT = \"EDIT_STUDENT\";\r\n\r\n//Single student\r\nexport const FETCH_STUDENT = \"FETCH_STUDENT\";\r\n","import * as at from './actionTypes';\r\n\r\n// ACTION CREATORS;\r\n/** needs to be an action creator\r\n * for each action type\r\n */\r\n\r\n// All Campuses\r\nexport const fetchAllCampuses = (campuses) => {\r\n  return {\r\n    type: at.FETCH_ALL_CAMPUSES,\r\n    payload: campuses,\r\n  };\r\n};\r\nexport const addCampus = (campus) => {\r\n  return {\r\n    type: at.ADD_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};\r\n\r\nexport const deleteCampus = (campusId) => {\r\n  return {\r\n    type: at.DELETE_CAMPUS,\r\n    payload: campusId,\r\n  };\r\n};\r\n\r\n\r\nexport const editCampus = (campus) => {\r\n  return {\r\n    type: at.EDIT_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};\r\n\r\n\r\n//Single Campus\r\nexport const fetchCampus = (campus) => {\r\n  return {\r\n    type: at.FETCH_CAMPUS,\r\n    payload: campus,\r\n  };\r\n};\r\n\r\n\r\n//All Students\r\nexport const fetchAllStudents = (students) => {\r\n  return {\r\n    type: at.FETCH_ALL_STUDENTS,\r\n    payload: students,\r\n  };\r\n};\r\n// ADD STUD\r\nexport const addStudent = (student) => {\r\n  return {\r\n    type: at.ADD_STUDENT,\r\n    payload: student,\r\n  };\r\n};\r\n\r\n\r\n// DELETE STUD\r\nexport const deleteStudent = (studentId) => {\r\n  return {\r\n    type: at.DELETE_STUDENT,\r\n    payload: studentId,\r\n  };\r\n};\r\n\r\n//EDIT STUD\r\nexport const editStudent = (student) => {\r\n  return {\r\n    type: at.EDIT_STUDENT,\r\n    payload: student,\r\n  };\r\n};\r\n\r\n//Single Student\r\nexport const fetchStudent = (student) => {\r\n  return {\r\n    type: at.FETCH_STUDENT,\r\n    payload: student,\r\n  };\r\n};","/*==================================================\r\n/src/store/thunks.js\r\n\r\nIt contains all Thunk Creators and Thunks.\r\n================================================== */\r\nimport * as ac from './actions/actionCreators';  // Import Action Creators (\"ac\" keyword Action Creator)\r\nconst axios = require('axios');\r\n\r\n//All Campuses\r\n// THUNK CREATOR:\r\nexport const fetchAllCampusesThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"campuses\" data from database\r\n    let res = await axios.get(`/api/campuses`);  \r\n    // Call Action Creator to return Action object (type + payload with \"campuses\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllCampuses(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// add campus\r\nexport const addCampusThunk = (campus) => async (dispatch) => {\r\n  try {\r\n    let res = await axios.post(`/api/campuses`, campus);\r\n    dispatch(ac.addCampus(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n //delete campas\r\nexport const deleteCampusThunk = campusId => async dispatch => {\r\n  try {\r\n    await axios.delete(`/api/campuses/${campusId}`);\r\n    //delete succesful so change state with dispatch\r\n    dispatch(ac.deleteCampus(campusId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n // edit campus\r\nexport const editCampusThunk = campus => async dispatch => {\r\n  try {\r\n    let updatedCampus = await axios.put(`/api/campuses/${campus.id}`, campus);\r\n    dispatch(ac.editCampus(updatedCampus));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n// Single Campus\r\n// THUNK CREATOR:\r\nexport const fetchCampusThunk = (id) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a student data (based on \"id\")from database\r\n    let res = await axios.get(`/api/campuses/${id}`);  \r\n    dispatch(ac.fetchCampus(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// All Students\r\n// THUNK CREATOR:\r\nexport const fetchAllStudentsThunk = () => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get \"students\" data from database\r\n    let res = await axios.get(`/api/students`);  \r\n    // Call Action Creator to return Action object (type + payload with \"students\" data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.fetchAllStudents(res.data));  \r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Add Student\r\n// THUNK CREATOR:\r\nexport const addStudentThunk = (student) => async (dispatch) => {  // The THUNK\r\n  try {\r\n    // API \"post\" call to add \"student\" object's data to database\r\n    let res = await axios.post(`/api/students`, student);  \r\n    // Call Action Creator to return Action object (type + payload with new students data)\r\n    // Then dispatch the Action object to Reducer to update state \r\n    dispatch(ac.addStudent(res.data));\r\n    return res.data;\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Delete Student\r\n// THUNK CREATOR:\r\nexport const deleteStudentThunk = studentId => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"delete\" call to delete student (based on \"studentID\") from database\r\n    await axios.delete(`/api/students/${studentId}`);  \r\n    // Delete successful so change state with dispatch\r\n    dispatch(ac.deleteStudent(studentId));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Edit Student\r\n// THUNK CREATOR:\r\nexport const editStudentThunk = student => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"put\" call to update student (based on \"id\" and \"student\" object's data) from database\r\n    let updatedStudent = await axios.put(`/api/students/${student.id}`, student); \r\n    // Update successful so change state with dispatch\r\n    dispatch(ac.editStudent(updatedStudent));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n\r\n// Single Student\r\n// THUNK CREATOR:\r\nexport const fetchStudentThunk = id => async dispatch => {  // The THUNK\r\n  try {\r\n    // API \"get\" call to get a specific student (based on \"id\") data from database\r\n    let res = await axios.get(`/api/students/${id}`);  \r\n    // Call Action Creator to return Action object (type + payload with student data)\r\n    // Then dispatch the Action object to Reducer to display student data \r\n    dispatch(ac.fetchStudent(res.data));\r\n  } catch(err) {\r\n    console.error(err);\r\n  }\r\n};\r\n","/*==================================================\r\nAllCampusesView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display all campuses.\r\n================================================== */\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AllCampusesView = (props) => {\r\n  // If there is no campus, display a message.\r\n  if (!props.allCampuses.length) {\r\n    return <div>There are no campuses.</div>;\r\n  }\r\n\r\n  // If there is at least one campus, render All Campuses view \r\n  return (\r\n    <div>\r\n      <h1>All Campuses</h1>\r\n\r\n      {props.allCampuses.map((campus) => (\r\n        <div key={campus.id}>\r\n          <Link to={`/campus/${campus.id}`}>\r\n            <h2>{campus.name}</h2>\r\n          </Link>\r\n          <h4>campus id: {campus.id}</h4>\r\n          <p>{campus.address}</p>\r\n          <p>{campus.description}</p>\r\n          <hr/>\r\n        </div>\r\n      ))}\r\n      <br/>\r\n      <Link to={`/`}>\r\n        <button>Add New Campus</button>\r\n      </Link>\r\n      <br/><br/>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Validate data type of the props passed to component.\r\nAllCampusesView.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n};\r\n\r\nexport default AllCampusesView;","/*==================================================\r\nAllStudentsView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the all students view page.\r\n================================================== */\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst AllStudentsView = (props) => {\r\n  const {students, deleteStudent} = props;\r\n  // If there is no student, display a message\r\n  if (!students.length) {\r\n    return (\r\n    <div>\r\n      <p>There are no students.</p>\r\n      <Link to={`newstudent`}>\r\n        <button>Add New Student</button>\r\n      </Link>\r\n    </div>\r\n    );\r\n  }\r\n  \r\n  // If there is at least one student, render All Students view \r\n  return (\r\n    <div>\r\n      <h1>All Students</h1>\r\n\r\n      {students.map((student) => {\r\n          let name = student.firstname + \" \" + student.lastname;\r\n          return (\r\n            <div key={student.id}>\r\n              <Link to={`/student/${student.id}`}>\r\n                <h2>{name}</h2>\r\n              </Link>\r\n              <button onClick={() => deleteStudent(student.id)}>Delete</button>\r\n              <hr/>\r\n            </div>\r\n          );\r\n        }\r\n      )}\r\n      <br/>\r\n      <Link to={`/newstudent`}>\r\n        <button>Add New Student</button>\r\n      </Link>\r\n      <br/><br/>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nexport default AllStudentsView;","/*==================================================\r\nNewStudentView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the new student page.\r\n================================================== */\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n// Create styling for the input form\r\nconst useStyles = makeStyles( () => ({\r\n  formContainer:{  \r\n    width: '500px',\r\n    backgroundColor: '#f0f0f5',\r\n    borderRadius: '5px',\r\n    margin: 'auto',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    textDecoration: 'none'\r\n  }, \r\n  customizeAppBar:{\r\n    backgroundColor: '#11153e',\r\n    shadows: ['none'],\r\n  },\r\n  formTitle:{\r\n    backgroundColor:'#c5c8d6',\r\n    marginBottom: '15px',\r\n    textAlign: 'center',\r\n    borderRadius: '5px 5px 0px 0px',\r\n    padding: '3px'\r\n  },\r\n}));\r\n\r\nconst NewStudentView = (props) => {\r\n  const {handleChange, handleSubmit } = props;\r\n  const classes = useStyles();\r\n\r\n  // Render a New Student view with an input form\r\n  return (\r\n    <div>\r\n      <h1>New Student</h1>\r\n\r\n      <div className={classes.root}>\r\n        <div className={classes.formContainer}>\r\n          <div className={classes.formTitle}>\r\n            <Typography style={{fontWeight: 'bold', fontFamily: 'Courier, sans-serif', fontSize: '20px', color: '#11153e'}}>\r\n              Add a Student\r\n            </Typography>\r\n          </div>\r\n          <form style={{textAlign: 'center'}} onSubmit={(e) => handleSubmit(e)}>\r\n            <label style= {{color:'#11153e', fontWeight: 'bold'}}>First Name: </label>\r\n            <input type=\"text\" name=\"firstname\" onChange ={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Last Name: </label>\r\n            <input type=\"text\" name=\"lastname\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <label style={{color:'#11153e', fontWeight: 'bold'}}>Campus Id: </label>\r\n            <input type=\"text\" name=\"campusId\" onChange={(e) => handleChange(e)} />\r\n            <br/>\r\n            <br/>\r\n\r\n            <Button variant=\"contained\" color=\"primary\" type=\"submit\">\r\n              Submit\r\n            </Button>\r\n            <br/>\r\n            <br/>\r\n          </form>\r\n          </div>\r\n      </div>\r\n    </div>    \r\n  )\r\n}\r\n\r\nexport default NewStudentView;","/*==================================================\r\nCampusView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display a single campus and its students (if any).\r\n================================================== */\r\nimport { Link } from \"react-router-dom\";\r\n\r\n// Take in props data to construct the component\r\nconst CampusView = (props) => {\r\n  const {campus} = props;\r\n  \r\n  // Render a single Campus view with list of its students\r\n  return (\r\n    <div>\r\n      <h1>{campus.name}</h1>\r\n      <p>{campus.address}</p>\r\n      <p>{campus.description}</p>\r\n      {campus.students.map( student => {\r\n        let name = student.firstname + \" \" + student.lastname;\r\n        return (\r\n          <div key={student.id}>\r\n            <Link to={`/student/${student.id}`}>\r\n              <h2>{name}</h2>\r\n            </Link>             \r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CampusView;","/*==================================================\r\nStudentView.js\r\n\r\nThe Views component is responsible for rendering web page with data provided by the corresponding Container component.\r\nIt constructs a React component to display the single student view page.\r\n================================================== */\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n    textAlign: 'left',\r\n    fontType: 'bold',\r\n    fontFamily: 'Courier, sans-serif', \r\n    fontSize: '35px', \r\n    color: '#CDDC39'\r\n  },\r\n  appBar:{\r\n    backgroundColor: '#11153e',\r\n    shadows: ['none'],\r\n  },\r\n  greeting:{\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    backgroundColor: 'white',\r\n    width: \"50%\",\r\n    margin: \"auto\",\r\n  },\r\n  links:{\r\n    textDecoration: 'none',\r\n  }\r\n\r\n}));\r\nconst StudentView = (props) => {\r\n  const classes = useStyles();\r\n  const { student } = props;\r\n  return (\r\n    <div className={classes.root}>\r\n    <AppBar position=\"static\" elevation={0} className={classes.appBar}>\r\n        <Toolbar>\r\n          <Link className = {classes.title} to={'/'}>\r\n          <Typography variant=\"h6\" className={classes.title} color=\"inherit\" >\r\n            CRUD App\r\n          </Typography>\r\n          </Link>\r\n\r\n          <Link className={classes.links} to={'/campuses'} >\r\n            <Button variant=\"contained\" color=\"primary\" style={{marginRight: '10px'}}>\r\n              All Campuses\r\n            </Button>\r\n          </Link>\r\n\r\n          <Link className={classes.links} to={'/students'} >\r\n            <Button variant=\"contained\" color=\"primary\">\r\n              All Students\r\n            </Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n\r\n      <h1>{student.firstname + \" \" + student.lastname}</h1>\r\n      {student.campus != null ?\r\n      <Link to={`/campus/${student.campus.id}`}>\r\n      <h3>{student.campus.name}</h3>\r\n    </Link>\r\n      \r\n      : \r\n      <h2> This student is not enrolled in a campus</h2>\r\n      }\r\n      <h3>{student.email}</h3>\r\n      <img src={student.imageUrl} alt = \"https://i.picsum.photos/id/690/200/200.jpg?hmac=DN6slU20ktSeMSXbM6U8BG_YHhebxEl3S70qNurkzk8\"/>\r\n      {student.gpa != null ?\r\n      <h3> GPA: {student.gpa} </h3> \r\n      : \r\n      <br></br>\r\n      }\r\n      <div>\r\n      <Link to={`/editstudent/${student.id}`}>\r\n          <button>Edit Student</button>\r\n        </Link>\r\n      </div>  \r\n    </div>\r\n  );\r\n\r\n};\r\n\r\nexport default StudentView;","/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);","/*==================================================\r\nCampusContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchCampusThunk } from \"../../store/thunks\";\r\n\r\nimport { CampusView } from \"../views\";\r\n\r\nclass CampusContainer extends Component {\r\n  // Get the specific campus data from back-end database\r\n  componentDidMount() {\r\n    // Get campus ID from URL (API link)\r\n    this.props.fetchCampus(this.props.match.params.id);\r\n  }\r\n\r\n  // Render a Campus view by passing campus data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <CampusView campus={this.props.campus} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"CampusContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"campus\".\r\nconst mapState = (state) => {\r\n  return {\r\n    campus: state.campus,  // Get the State object from Reducer \"campus\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchCampus: (id) => dispatch(fetchCampusThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// CampusContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(CampusContainer);","/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk\r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass AllStudentsContainer extends Component {\r\n  // Get all students data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchAllStudents();\r\n  }\r\n\r\n  // Render All Students view by passing all students data as props to the corresponding View component\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <AllStudentsView \r\n          students={this.props.allStudents}\r\n          deleteStudent={this.props.deleteStudent}   \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n  return {\r\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));","/*==================================================\r\nStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchStudentThunk } from \"../../store/thunks\";\r\nimport { StudentView } from \"../views\";\r\n\r\nclass StudentContainer extends Component {\r\n  // Get student data from back-end database\r\n  componentDidMount() {\r\n    //getting student ID from url\r\n    this.props.fetchStudent(this.props.match.params.id);\r\n  }\r\n\r\n  // Render Student view by passing student data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <StudentView student={this.props.student} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"StudentContainer\" to connect to Redux Store.  \r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,  // Get the State object from Reducer \"student\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// StudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(StudentContainer);","/*==================================================\r\nNewStudentContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { Redirect } from 'react-router-dom';\r\n\r\nimport NewStudentView from '../views/NewStudentView';\r\nimport { addStudentThunk } from '../../store/thunks';\r\n\r\nclass NewStudentContainer extends Component {\r\n  // Initialize state\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: false, \r\n      redirectId: null\r\n    };\r\n  }\r\n\r\n  // Capture input data when it is entered\r\n  handleChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  }\r\n\r\n  // Take action after user click the submit button\r\n  handleSubmit = async event => {\r\n    event.preventDefault();  // Prevent browser reload/refresh after submit.\r\n\r\n    let student = {\r\n        firstname: this.state.firstname,\r\n        lastname: this.state.lastname,\r\n        campusId: this.state.campusId\r\n    };\r\n    \r\n    // Add new student in back-end database\r\n    let newStudent = await this.props.addStudent(student);\r\n\r\n    // Update state, and trigger redirect to show the new student\r\n    this.setState({\r\n      firstname: \"\", \r\n      lastname: \"\", \r\n      campusId: null, \r\n      redirect: true, \r\n      redirectId: newStudent.id\r\n    });\r\n  }\r\n\r\n  // Unmount when the component is being removed from the DOM:\r\n  componentWillUnmount() {\r\n      this.setState({redirect: false, redirectId: null});\r\n  }\r\n\r\n  // Render new student input form\r\n  render() {\r\n    // Redirect to new student's page after submit\r\n    if(this.state.redirect) {\r\n      return (<Redirect to={`/student/${this.state.redirectId}`}/>)\r\n    }\r\n\r\n    // Display the input form via the corresponding View component\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <NewStudentView \r\n          handleChange = {this.handleChange} \r\n          handleSubmit={this.handleSubmit}      \r\n        />\r\n      </div>          \r\n    );\r\n  }\r\n}\r\n\r\n// The following input argument is passed to the \"connect\" function used by \"NewStudentContainer\" component to connect to Redux Store.\r\n// The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n    return({\r\n        addStudent: (student) => dispatch(addStudentThunk(student)),\r\n    })\r\n}\r\n\r\n// Export store-connected container by default\r\n// NewStudentContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(null, mapDispatch)(NewStudentContainer);","import \"./App.css\";\r\n\r\n//Router\r\nimport { Switch, Route } from \"react-router-dom\";\r\n//Components\r\nimport {\r\n  HomePageContainer,\r\n  CampusContainer,\r\n  StudentContainer,\r\n  AllCampusesContainer,\r\n  AllStudentsContainer,\r\n  NewStudentContainer\r\n} from './components/containers';\r\n\r\n// if you create separate components for adding/editing \r\n// a student or campus, make sure you add routes to those\r\n// components here\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Switch>\r\n        <Route exact path=\"/\" component={HomePageContainer} />\r\n        <Route exact path=\"/campuses\" component={AllCampusesContainer} />\r\n        <Route exact path=\"/campus/:id\" component={CampusContainer} />\r\n        <Route exact path=\"/students\" component={AllStudentsContainer} />\r\n        <Route exact path=\"/newstudent\" component={NewStudentContainer} />\r\n        <Route exact path=\"/student/:id\" component={StudentContainer} />\r\n      </Switch>        \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","/*==================================================\r\n/src/store/reducers/campuses.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\r\n\r\n// REDUCER:\r\nconst allCampuses = (state = [], action) => {  // Empty array as default Initial State\r\n  switch (action.type) {\r\n    case at.FETCH_ALL_CAMPUSES:\r\n      return action.payload;\r\n      case at.ADD_CAMPUS:\r\n         return [...state, action.payload]\r\n      case at.DELETE_CAMPUS:\r\n        return state.filter(campus => campus.id!==action.payload);\r\n      case at.EDIT_CAMPUS:\r\n        return state.map(campus=>{\r\n        return(\r\n          campus.id===action.payload.id ? action.paylad:campus\r\n        );\r\n      });\r\n            default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default allCampuses;","/*==================================================\r\n/src/store/reducers/campus.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport { FETCH_CAMPUS } from \"../actions/actionTypes\";  // Import Action Type\r\n\r\n// Define default Initial State\r\nconst initialState = {\r\n  students: [],  // Empty students array\r\n};\r\n\r\n// REDUCER:\r\nconst campus = (state = initialState, action) => {  // Use \"initialState\" as default Initial State\r\n  switch (action.type) {\r\n    case FETCH_CAMPUS:\r\n      return action.payload;\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default campus;","/*==================================================\r\n/src/store/reducers/students.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport * as at from \"../actions/actionTypes\";  // Import Action Types (\"at\" keyword for Action Type)\r\n\r\n// REDUCER:\r\nconst allStudents = (state=[], action) => {  // Empty array as default Initial State\r\n  switch (action.type) {\r\n    case at.FETCH_ALL_STUDENTS:\r\n      return action.payload;\r\n    case at.ADD_STUDENT:\r\n      return [...state, action.payload]\r\n    case at.DELETE_STUDENT:\r\n      return state.filter(student => student.id!==action.payload);\r\n    case at.EDIT_STUDENT:\r\n      return state.map(student => { \r\n        return (\r\n          student.id===action.payload.id ? action.payload : student\r\n        );\r\n      });\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default allStudents;","/*==================================================\r\n/src/store/reducers/student.js\r\n\r\nThis is a Reducer function that accepts 2 parameters: the previous state object (aka current state) and an action object. \r\nDepending on the Action object, the Reducer updates the State and return the new State object.\r\nIt also defines the State and its default initial value.\r\n================================================== */\r\nimport { FETCH_STUDENT } from \"../actions/actionTypes\";  // Import Action Type\r\n\r\n// Define default Initial state\r\nconst initialState = {\r\n  campus: {},  // Empty object\r\n};\r\n\r\n// REDUCER:\r\nconst student = (state=initialState, action) => {  // Use \"initialState\" as default Initial State\r\n  switch (action.type) {\r\n    case FETCH_STUDENT:\r\n      return action.payload;\r\n    default:\r\n      // If the Reducer doesn't recognize the Action Type, returns the previous (current) State unchanged.\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default student;","/*==================================================\r\n/src/store/index.js\r\n\r\nIt contains the necessities and accessories for constructing the Redux Store.\r\nIt creates a single Redux Store that holds the complete state tree of the app, so that the Redux Store state can access the states in all Reducers. \r\n================================================== */\r\nimport { combineReducers, applyMiddleware, createStore } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\n// Import all Reducers from the barrel file (/src/store/reducers/index.js)\r\nimport * as reducers from './reducers';\r\n\r\n// Construct the Redux Store:\r\n// Create a single Root Reducer to combine all Reducers, so that the Redux Store state can \r\n// access the states in all Reducers of the app.\r\nconst rootReducer = combineReducers(reducers);  \r\n// Create a logger middleware to log dispatched Actions in console,\r\n// so that it displays prevState, nextState, and Action when an Action is dispatched.\r\nconst logger = createLogger({ collapsed: true });  // Collapse console messages when displayed\r\n// Create a Redux Store using Root Reducer and a middleware pipeline consisting of Thunk and logger.\r\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\r\n\r\n// Export the Redux Store by default, which will be provided to and injected within our entire application\r\nexport default store;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n// Redux\r\nimport { Provider } from \"react-redux\";\r\nimport store from \"./store\";\r\n\r\n// Router\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\n// The Provider component makes the Redux Store available to any nested components that need to access the Redux Store. \r\n// The BrowserRouter component sets a common basename for the nested Routes.\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <BrowserRouter>\r\n        <App />\r\n      </BrowserRouter>\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}