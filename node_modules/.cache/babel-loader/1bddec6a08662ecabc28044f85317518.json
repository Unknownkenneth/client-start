{"ast":null,"code":"import _classCallCheck from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */import Header from'./Header';import{Component}from'react';import{connect}from'react-redux';import{withRouter}from\"react-router-dom\";import{fetchAllStudentsThunk,deleteStudentThunk}from'../../store/thunks';import AllStudentsView from'../views/AllStudentsView';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AllStudentsContainer=/*#__PURE__*/function(_Component){_inherits(AllStudentsContainer,_Component);var _super=_createSuper(AllStudentsContainer);function AllStudentsContainer(){_classCallCheck(this,AllStudentsContainer);return _super.apply(this,arguments);}_createClass(AllStudentsContainer,[{key:\"componentDidMount\",value:// Get all students data from back-end database\nfunction componentDidMount(){this.props.fetchAllStudents();}// Render All Students view by passing all students data as props to the corresponding View component\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(AllStudentsView,{students:this.props.allStudents,deleteStudent:this.props.deleteStudent})]});}}]);return AllStudentsContainer;}(Component);// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\nvar mapState=function mapState(state){return{allStudents:state.allStudents// Get the State object from Reducer \"allStudents\"\n};};// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nvar mapDispatch=function mapDispatch(dispatch){return{fetchAllStudents:function fetchAllStudents(){return dispatch(fetchAllStudentsThunk());},deleteStudent:function deleteStudent(studentId){return dispatch(deleteStudentThunk(studentId));}};};// Export store-connected container by default\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default withRouter(connect(mapState,mapDispatch)(AllStudentsContainer));","map":{"version":3,"names":["Header","Component","connect","withRouter","fetchAllStudentsThunk","deleteStudentThunk","AllStudentsView","AllStudentsContainer","props","fetchAllStudents","allStudents","deleteStudent","mapState","state","mapDispatch","dispatch","studentId"],"sources":["C:/Users/lowka/OneDrive/Desktop/web dev/client-start/src/components/containers/AllStudentsContainer.js"],"sourcesContent":["/*==================================================\r\nAllStudentsContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\nimport { \r\n  fetchAllStudentsThunk,\r\n  deleteStudentThunk\r\n} from '../../store/thunks';\r\n\r\nimport AllStudentsView from '../views/AllStudentsView';\r\n\r\nclass AllStudentsContainer extends Component {\r\n  // Get all students data from back-end database\r\n  componentDidMount() {\r\n    this.props.fetchAllStudents();\r\n  }\r\n\r\n  // Render All Students view by passing all students data as props to the corresponding View component\r\n  render(){\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <AllStudentsView \r\n          students={this.props.allStudents}\r\n          deleteStudent={this.props.deleteStudent}   \r\n        />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllStudentsContainer\" component to connect to Redux Store.\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allStudents\".\r\nconst mapState = (state) => {\r\n  return {\r\n    allStudents: state.allStudents,  // Get the State object from Reducer \"allStudents\"\r\n  };\r\n};\r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllStudents: () => dispatch(fetchAllStudentsThunk()),\r\n    deleteStudent: (studentId) => dispatch(deleteStudentThunk(studentId)),\r\n  };\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllStudentsContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default withRouter(connect(mapState, mapDispatch)(AllStudentsContainer));"],"mappings":"4pBAAA;AACA;AACA;AACA;AACA;AACA;AACA,qDACA,MAAOA,OAAM,KAAM,UAAU,CAC7B,OAASC,SAAS,KAAQ,OAAO,CACjC,OAASC,OAAO,KAAQ,aAAa,CACrC,OAASC,UAAU,KAAQ,kBAAkB,CAE7C,OACEC,qBAAqB,CACrBC,kBAAkB,KACb,oBAAoB,CAE3B,MAAOC,gBAAe,KAAM,0BAA0B,CAAC,2FAEjDC,qBAAoB,8SACxB;AACA,4BAAoB,CAClB,IAAI,CAACC,KAAK,CAACC,gBAAgB,EAAE,CAC/B,CAEA;AAAA,sBACA,iBAAQ,CACN,mBACE,oCACE,KAAC,MAAM,IAAG,cACV,KAAC,eAAe,EACd,QAAQ,CAAE,IAAI,CAACD,KAAK,CAACE,WAAY,CACjC,aAAa,CAAE,IAAI,CAACF,KAAK,CAACG,aAAc,EACxC,GACE,CAEV,CAAC,kCAjBgCV,SAAS,EAoB5C;AACA;AACA;AACA,GAAMW,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,KAAK,CAAK,CAC1B,MAAO,CACLH,WAAW,CAAEG,KAAK,CAACH,WAAc;AACnC,CAAC,CACH,CAAC,CACD;AACA;AACA,GAAMI,YAAW,CAAG,QAAdA,YAAW,CAAIC,QAAQ,CAAK,CAChC,MAAO,CACLN,gBAAgB,CAAE,kCAAMM,SAAQ,CAACX,qBAAqB,EAAE,CAAC,GACzDO,aAAa,CAAE,uBAACK,SAAS,QAAKD,SAAQ,CAACV,kBAAkB,CAACW,SAAS,CAAC,CAAC,EACvE,CAAC,CACH,CAAC,CAED;AACA;AACA;AACA,cAAeb,WAAU,CAACD,OAAO,CAACU,QAAQ,CAAEE,WAAW,CAAC,CAACP,oBAAoB,CAAC,CAAC"},"metadata":{},"sourceType":"module"}