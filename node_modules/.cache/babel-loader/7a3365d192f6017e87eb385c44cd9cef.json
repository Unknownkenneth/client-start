{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\lowka\\\\OneDrive\\\\Desktop\\\\web dev\\\\client-start\\\\src\\\\components\\\\containers\\\\EditStudentContainer.js\";\n/*==================================================\r\nEditStudentContainer.js\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\nimport Header from './Header';\nimport { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport EditStudentView from '../views/EditStudentView';\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass EditStudentContainer extends Component {\n  constructor(props) {\n    //defines studnet item and student ID item\n    super(props);\n    this.handleChange = event => {\n      this.setState({\n        [event.target.name]: event.target.value\n      });\n    };\n    this.handleSubmit = async event => {\n      event.preventDefault();\n      let student = {\n        firstname: this.state.firstname,\n        lastname: this.state.lastname,\n        campusId: this.state.campusId,\n        imageURL: this.state.imageURL,\n        gpa: this.state.gpa,\n        email: this.state.email,\n        id: this.state.studentId\n      };\n      let newStudent = await this.props.editStudent(student);\n      console.log(newStudent);\n      this.setState({\n        firstname: '',\n        lastname: '',\n        imageURL: '',\n        gpa: '',\n        email: '',\n        campusId: null,\n        redirect: true,\n        redirectId: this.state.studentId\n      });\n    };\n    this.state = {\n      student: this.props.student,\n      studentId: this.props.match.params.id,\n      redirect: false,\n      redirectId: null\n    };\n  }\n  componentDidMount() {\n    //getting student ID from url\n    this.props.fetchStudent(this.state.studentId);\n  }\n\n  //change state values based on user input\n\n  componentWillUnmount() {\n    this.setState({\n      redirect: false,\n      redirectId: null\n    });\n  }\n  render() {\n    if (this.state.redirect) {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: `/student/${this.state.redirectId}`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 14\n      }, this);\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EditStudentView, {\n        studentInfo: this.state,\n        handleChange: this.handleChange,\n        handleSubmit: this.handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n  }\n}\nconst mapState = state => {\n  return {\n    student: state.student\n  };\n};\nconst mapDispatch = dispatch => {\n  return {\n    fetchStudent: id => dispatch(fetchStudentThunk(id)),\n    editStudent: student => dispatch(editStudentThunk(student))\n  };\n};\nEditStudentContainer.propTypes = {\n  fetchStudent: PropTypes.func.isRequired,\n  editStudent: PropTypes.func.isRequired\n};\nexport default connect(mapState, mapDispatch)(EditStudentContainer);","map":{"version":3,"names":["Header","Component","connect","Redirect","PropTypes","EditStudentView","editStudentThunk","fetchStudentThunk","EditStudentContainer","constructor","props","handleChange","event","setState","target","name","value","handleSubmit","preventDefault","student","firstname","state","lastname","campusId","imageURL","gpa","email","id","studentId","newStudent","editStudent","console","log","redirect","redirectId","match","params","componentDidMount","fetchStudent","componentWillUnmount","render","mapState","mapDispatch","dispatch","propTypes","func","isRequired"],"sources":["C:/Users/lowka/OneDrive/Desktop/web dev/client-start/src/components/containers/EditStudentContainer.js"],"sourcesContent":["/*==================================================\r\nEditStudentContainer.js\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header'\r\nimport { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport { Redirect } from 'react-router-dom'\r\nimport PropTypes from 'prop-types'\r\n\r\nimport EditStudentView from '../views/EditStudentView'\r\nimport { editStudentThunk, fetchStudentThunk } from '../../store/thunks'\r\n\r\nclass EditStudentContainer extends Component {\r\n  constructor(props) {\r\n    //defines studnet item and student ID item\r\n    super(props)\r\n    this.state = {\r\n      student: this.props.student,\r\n      studentId: this.props.match.params.id,\r\n      redirect: false,\r\n      redirectId: null,\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    //getting student ID from url\r\n    this.props.fetchStudent(this.state.studentId)\r\n  }\r\n\r\n  //change state values based on user input\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value,\r\n    })\r\n  }\r\n\r\n  //handle submission\r\n  handleSubmit = async (event) => {\r\n    event.preventDefault()\r\n    let student = {\r\n      firstname: this.state.firstname,\r\n      lastname: this.state.lastname,\r\n      campusId: this.state.campusId,\r\n      imageURL: this.state.imageURL,\r\n      gpa: this.state.gpa,\r\n      email: this.state.email,\r\n      id: this.state.studentId,\r\n    }\r\n\r\n    let newStudent = await this.props.editStudent(student)\r\n    console.log(newStudent)\r\n    this.setState({\r\n      firstname: '',\r\n      lastname: '',\r\n      imageURL: '',\r\n      gpa: '',\r\n      email: '',\r\n      campusId: null,\r\n      redirect: true,\r\n      redirectId: this.state.studentId,\r\n    })\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.setState({ redirect: false, redirectId: null })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.redirect) {\r\n      return <Redirect to={`/student/${this.state.redirectId}`} />\r\n    }\r\n    return (\r\n      <>\r\n        {/*Render the view of the Edit Student*/}\r\n        <Header />\r\n        <EditStudentView\r\n          studentInfo={this.state}\r\n          handleChange={this.handleChange}\r\n          handleSubmit={this.handleSubmit}\r\n        />\r\n      </>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    student: state.student,\r\n  }\r\n}\r\n\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchStudent: (id) => dispatch(fetchStudentThunk(id)),\r\n    editStudent: (student) => dispatch(editStudentThunk(student)),\r\n  }\r\n}\r\n\r\nEditStudentContainer.propTypes = {\r\n  fetchStudent: PropTypes.func.isRequired,\r\n  editStudent: PropTypes.func.isRequired,\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(EditStudentContainer)"],"mappings":"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"},"metadata":{},"sourceType":"module"}