{"ast":null,"code":"import _classCallCheck from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"C:/Users/lowka/OneDrive/Desktop/web dev/client-start/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */import Header from'./Header';import{Component}from\"react\";import{connect}from\"react-redux\";import{fetchAllCampusesThunk}from\"../../store/thunks\";import{AllCampusesView}from\"../views\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AllCampusesContainer=/*#__PURE__*/function(_Component){_inherits(AllCampusesContainer,_Component);var _super=_createSuper(AllCampusesContainer);function AllCampusesContainer(){_classCallCheck(this,AllCampusesContainer);return _super.apply(this,arguments);}_createClass(AllCampusesContainer,[{key:\"componentDidMount\",value:// Get all campuses data from back-end database\nfunction componentDidMount(){console.log(this.props);this.props.fetchAllCampuses();}// Render All Campuses view by passing all campuses data as props to the corresponding View component\n},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(AllCampusesView,{allCampuses:this.props.allCampuses})]});}}]);return AllCampusesContainer;}(Component);// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\nvar mapState=function mapState(state){return{allCampuses:state.allCampuses// Get the State object from Reducer \"allCampuses\"\n};};// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\nvar mapDispatch=function mapDispatch(dispatch){return{fetchAllCampuses:function fetchAllCampuses(){return dispatch(fetchAllCampusesThunk());}};};// Type check props;\n// Export store-connected container by default\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \n// (and re-read the values when the Store State updates).\nexport default connect(mapState,mapDispatch)(AllCampusesContainer);","map":{"version":3,"names":["Header","Component","connect","fetchAllCampusesThunk","AllCampusesView","AllCampusesContainer","console","log","props","fetchAllCampuses","allCampuses","mapState","state","mapDispatch","dispatch"],"sources":["C:/Users/lowka/OneDrive/Desktop/web dev/client-start/src/components/containers/AllCampusesContainer.js"],"sourcesContent":["/*==================================================\r\n/src/components/containers\\AllCampusesContainer.js\r\n\r\nThe Container component is responsible for stateful logic and data fetching, and\r\npasses data (if any) as props to the corresponding View component.\r\nIf needed, it also defines the component's \"connect\" function.\r\n================================================== */\r\nimport Header from './Header';\r\nimport { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { fetchAllCampusesThunk } from \"../../store/thunks\";\r\nimport { AllCampusesView } from \"../views\";\r\n\r\nclass AllCampusesContainer extends Component {\r\n  // Get all campuses data from back-end database\r\n  componentDidMount() {\r\n    console.log(this.props);\r\n    this.props.fetchAllCampuses();\r\n  }\r\n\r\n  // Render All Campuses view by passing all campuses data as props to the corresponding View component\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header />\r\n        <AllCampusesView\r\n          allCampuses={this.props.allCampuses}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// 1. The \"mapState\" argument specifies the data from Redux Store that the component needs.\r\n// The \"mapState\" is called when the Store State changes, and it returns a data object of \"allCampuses\".\r\n// The following 2 input arguments are passed to the \"connect\" function used by \"AllCampusesContainer\" component to connect to Redux Store.\r\nconst mapState = (state) => {\r\n  return {\r\n    allCampuses: state.allCampuses,  // Get the State object from Reducer \"allCampuses\"\r\n  };\r\n};  \r\n// 2. The \"mapDispatch\" argument is used to dispatch Action (Redux Thunk) to Redux Store.\r\n// The \"mapDispatch\" calls the specific Thunk to dispatch its action. The \"dispatch\" is a function of Redux Store.\r\nconst mapDispatch = (dispatch) => {\r\n  return {\r\n    fetchAllCampuses: () => dispatch(fetchAllCampusesThunk()),\r\n  };\r\n};\r\n\r\n// Type check props;\r\nAllCampusesContainer.propTypes = {\r\n  allCampuses: PropTypes.array.isRequired,\r\n  fetchAllCampuses: PropTypes.func.isRequired,\r\n};\r\n\r\n// Export store-connected container by default\r\n// AllCampusesContainer uses \"connect\" function to connect to Redux Store and to read values from the Store \r\n// (and re-read the values when the Store State updates).\r\nexport default connect(mapState, mapDispatch)(AllCampusesContainer);"],"mappings":"4pBAAA;AACA;AACA;AACA;AACA;AACA;AACA,qDACA,MAAOA,OAAM,KAAM,UAAU,CAC7B,OAASC,SAAS,KAAQ,OAAO,CAEjC,OAASC,OAAO,KAAQ,aAAa,CACrC,OAASC,qBAAqB,KAAQ,oBAAoB,CAC1D,OAASC,eAAe,KAAQ,UAAU,CAAC,2FAErCC,qBAAoB,8SACxB;AACA,4BAAoB,CAClBC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC,CACvB,IAAI,CAACA,KAAK,CAACC,gBAAgB,EAAE,CAC/B,CAEA;AAAA,sBACA,iBAAS,CACP,mBACE,oCACE,KAAC,MAAM,IAAG,cACV,KAAC,eAAe,EACd,WAAW,CAAE,IAAI,CAACD,KAAK,CAACE,WAAY,EACpC,GACE,CAEV,CAAC,kCAjBgCT,SAAS,EAoB5C;AACA;AACA;AACA,GAAMU,SAAQ,CAAG,QAAXA,SAAQ,CAAIC,KAAK,CAAK,CAC1B,MAAO,CACLF,WAAW,CAAEE,KAAK,CAACF,WAAc;AACnC,CAAC,CACH,CAAC,CACD;AACA;AACA,GAAMG,YAAW,CAAG,QAAdA,YAAW,CAAIC,QAAQ,CAAK,CAChC,MAAO,CACLL,gBAAgB,CAAE,kCAAMK,SAAQ,CAACX,qBAAqB,EAAE,CAAC,EAC3D,CAAC,CACH,CAAC,CAED;AAMA;AACA;AACA;AACA,cAAeD,QAAO,CAACS,QAAQ,CAAEE,WAAW,CAAC,CAACR,oBAAoB,CAAC"},"metadata":{},"sourceType":"module"}